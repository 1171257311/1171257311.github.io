<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【MySQL】各种“连接”（内连接，左连接，右连接等等）</title>
      <link href="/2020/08/19/join/"/>
      <url>/2020/08/19/join/</url>
      
        <content type="html"><![CDATA[<h2 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h2><img src="https://raw.githubusercontent.com/1171257311/picgo/master/images/%E6%8D%95%E8%8E%B7.JPG" width="80%" height="50%"><hr><h3 id="1、内连接（INNER-JOIN）"><a href="#1、内连接（INNER-JOIN）" class="headerlink" title="1、内连接（INNER JOIN）"></a>1、内连接（INNER JOIN）</h3><img src="https://raw.githubusercontent.com/1171257311/picgo/master/images/%E6%8D%95%E8%8E%B71.JPG " width="50%" height="50%"><p>代码如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>  A<span class="token punctuation">.</span>PK <span class="token keyword">AS</span> A_PK<span class="token punctuation">,</span>A<span class="token punctuation">.</span><span class="token keyword">Value</span> <span class="token keyword">AS</span> A_Value<span class="token punctuation">,</span>B<span class="token punctuation">.</span>PK <span class="token keyword">AS</span> B_PK<span class="token punctuation">,</span>B<span class="token punctuation">.</span><span class="token keyword">Value</span> <span class="token keyword">AS</span> B_Value<span class="token keyword">FROM</span> table_a A<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> table_b B<span class="token keyword">ON</span> A<span class="token punctuation">.</span>PK <span class="token operator">=</span> B<span class="token punctuation">.</span>PK<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查询结果：<br><img src="https://raw.githubusercontent.com/1171257311/picgo/master/images/20200819221111.png" width="70%" height="50%">   </p><hr><h3 id="2、左连接（LEFT-JOIN）"><a href="#2、左连接（LEFT-JOIN）" class="headerlink" title="2、左连接（LEFT JOIN）"></a>2、左连接（LEFT JOIN）</h3><img src="https://raw.githubusercontent.com/1171257311/picgo/master/images/20200819221213.png" width="50%" height="50%"><p>代码如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>  A<span class="token punctuation">.</span>PK <span class="token keyword">AS</span> A_PK<span class="token punctuation">,</span>A<span class="token punctuation">.</span><span class="token keyword">Value</span> <span class="token keyword">AS</span> A_Value<span class="token punctuation">,</span>B<span class="token punctuation">.</span>PK <span class="token keyword">AS</span> B_PK<span class="token punctuation">,</span>B<span class="token punctuation">.</span><span class="token keyword">Value</span> <span class="token keyword">AS</span> B_Value<span class="token keyword">FROM</span> table_a A<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span>  table_b B<span class="token keyword">ON</span> A<span class="token punctuation">.</span>PK <span class="token operator">=</span> B<span class="token punctuation">.</span>PK<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查询结果：<br><img src="https://raw.githubusercontent.com/1171257311/picgo/master/images/20200819221324.png" width="60%" height="50%">      </p><hr><h3 id="3、右连接（RIGHT-JOIN）"><a href="#3、右连接（RIGHT-JOIN）" class="headerlink" title="3、右连接（RIGHT JOIN）"></a>3、右连接（RIGHT JOIN）</h3><img src="https://raw.githubusercontent.com/1171257311/picgo/master/images/20200819221409.png" width="50%" height="50%"><p>代码如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>  A<span class="token punctuation">.</span>PK <span class="token keyword">AS</span> A_PK<span class="token punctuation">,</span>A<span class="token punctuation">.</span><span class="token keyword">Value</span> <span class="token keyword">AS</span> A_Value<span class="token punctuation">,</span>B<span class="token punctuation">.</span>PK <span class="token keyword">AS</span> B_PK<span class="token punctuation">,</span>B<span class="token punctuation">.</span><span class="token keyword">Value</span> <span class="token keyword">AS</span> B_Value<span class="token keyword">FROM</span> table_a A<span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span>   table_b B<span class="token keyword">ON</span> A<span class="token punctuation">.</span>PK <span class="token operator">=</span> B<span class="token punctuation">.</span>PK<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查询结果：<br><img src="https://raw.githubusercontent.com/1171257311/picgo/master/images/20200819221538.png" width="6 0%" height="80%"></p><hr><h3 id="4、全连接（FULL-JOIN）"><a href="#4、全连接（FULL-JOIN）" class="headerlink" title="4、全连接（FULL JOIN）"></a>4、全连接（FULL JOIN）</h3><img src="https://raw.githubusercontent.com/1171257311/picgo/master/images/20200819221647.png" width="50%" height="50%">             <p>代码如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>  A<span class="token punctuation">.</span>PK <span class="token keyword">AS</span> A_PK<span class="token punctuation">,</span>A<span class="token punctuation">.</span><span class="token keyword">Value</span> <span class="token keyword">AS</span> A_Value<span class="token punctuation">,</span>B<span class="token punctuation">.</span>PK <span class="token keyword">AS</span> B_PK<span class="token punctuation">,</span>B<span class="token punctuation">.</span><span class="token keyword">Value</span> <span class="token keyword">AS</span> B_Value<span class="token keyword">FROM</span> table_a A<span class="token keyword">FULL</span>  <span class="token keyword">JOIN</span> table_b B<span class="token keyword">ON</span> A<span class="token punctuation">.</span>PK <span class="token operator">=</span> B<span class="token punctuation">.</span>PK<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码在mysql执行是报错的，因为mysql不支持全连接，只能用以下代码实现效果，含义是左连接+右连接+去重=全。   </p><p>所谓的去重，实际上就是使用UNION，取并集：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>  A<span class="token punctuation">.</span>PK <span class="token keyword">AS</span> A_PK<span class="token punctuation">,</span>A<span class="token punctuation">.</span><span class="token keyword">Value</span> <span class="token keyword">AS</span> A_Value<span class="token punctuation">,</span>B<span class="token punctuation">.</span>PK <span class="token keyword">AS</span> B_PK<span class="token punctuation">,</span>B<span class="token punctuation">.</span><span class="token keyword">Value</span> <span class="token keyword">AS</span> B_Value<span class="token keyword">FROM</span> table_a A<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span>  table_b B<span class="token keyword">ON</span> A<span class="token punctuation">.</span>PK <span class="token operator">=</span> B<span class="token punctuation">.</span>PK <span class="token keyword">UNION</span><span class="token keyword">SELECT</span>  A<span class="token punctuation">.</span>PK <span class="token keyword">AS</span> A_PK<span class="token punctuation">,</span>A<span class="token punctuation">.</span><span class="token keyword">Value</span> <span class="token keyword">AS</span> A_Value<span class="token punctuation">,</span>B<span class="token punctuation">.</span>PK <span class="token keyword">AS</span> B_PK<span class="token punctuation">,</span>B<span class="token punctuation">.</span><span class="token keyword">Value</span> <span class="token keyword">AS</span> B_Value<span class="token keyword">FROM</span> table_a A<span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span>  table_b B<span class="token keyword">ON</span> A<span class="token punctuation">.</span>PK <span class="token operator">=</span> B<span class="token punctuation">.</span>PK<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询结果：<br><img src="https://raw.githubusercontent.com/1171257311/picgo/master/images/20200819221917.png" width="60%" height="80%"></p><hr><h3 id="5、左连接不包含内连接"><a href="#5、左连接不包含内连接" class="headerlink" title="5、左连接不包含内连接"></a>5、左连接不包含内连接</h3><img src="https://raw.githubusercontent.com/1171257311/picgo/master/images/20200819222016.png" width="50%" height="50%">       <p>代码如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> A<span class="token punctuation">.</span>PK <span class="token keyword">AS</span> A_PK<span class="token punctuation">,</span> A<span class="token punctuation">.</span><span class="token keyword">Value</span> <span class="token keyword">AS</span> A_Value<span class="token punctuation">,</span>B<span class="token punctuation">.</span><span class="token keyword">Value</span> <span class="token keyword">AS</span> B_Value<span class="token punctuation">,</span> B<span class="token punctuation">.</span>PK <span class="token keyword">AS</span> B_PK<span class="token keyword">FROM</span> Table_A A<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> Table_B B<span class="token keyword">ON</span> A<span class="token punctuation">.</span>PK <span class="token operator">=</span> B<span class="token punctuation">.</span>PK<span class="token keyword">WHERE</span> B<span class="token punctuation">.</span>PK <span class="token operator">IS</span> <span class="token boolean">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询结果：<br><img src="https://raw.githubusercontent.com/1171257311/picgo/master/images/20200819222219.png" width="80%" height="80%"></p><hr><h3 id="6、右连接不包含内连接"><a href="#6、右连接不包含内连接" class="headerlink" title="6、右连接不包含内连接"></a>6、右连接不包含内连接</h3><img src="https://raw.githubusercontent.com/1171257311/picgo/master/images/20200819222253.png" width="50%" height="50%">       <p>代码如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> A<span class="token punctuation">.</span>PK <span class="token keyword">AS</span> A_PK<span class="token punctuation">,</span> A<span class="token punctuation">.</span><span class="token keyword">Value</span> <span class="token keyword">AS</span> A_Value<span class="token punctuation">,</span> B<span class="token punctuation">.</span>PK <span class="token keyword">AS</span> B_PK<span class="token punctuation">,</span>B<span class="token punctuation">.</span><span class="token keyword">Value</span> <span class="token keyword">AS</span> B_Value<span class="token keyword">FROM</span> Table_A A<span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> Table_B B<span class="token keyword">ON</span> A<span class="token punctuation">.</span>PK <span class="token operator">=</span> B<span class="token punctuation">.</span>PK<span class="token keyword">WHERE</span> A<span class="token punctuation">.</span>PK <span class="token operator">IS</span> <span class="token boolean">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询结果：   </p><img src="https://raw.githubusercontent.com/1171257311/picgo/master/images/20200819222346.png" width="70%" height="80%">  <hr><h3 id="7、外连接不包含内连接"><a href="#7、外连接不包含内连接" class="headerlink" title="7、外连接不包含内连接"></a>7、外连接不包含内连接</h3><img src="https://raw.githubusercontent.com/1171257311/picgo/master/images/20200819222729.png" width="50%" height="50%"><p>代码如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> A<span class="token punctuation">.</span>PK <span class="token keyword">AS</span> A_PK<span class="token punctuation">,</span> A<span class="token punctuation">.</span><span class="token keyword">Value</span> <span class="token keyword">AS</span> A_Value<span class="token punctuation">,</span>B<span class="token punctuation">.</span><span class="token keyword">Value</span> <span class="token keyword">AS</span> B_Value<span class="token punctuation">,</span> B<span class="token punctuation">.</span>PK <span class="token keyword">AS</span> B_PK<span class="token keyword">FROM</span> Table_A A<span class="token keyword">FULL</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> Table_B B<span class="token keyword">ON</span> A<span class="token punctuation">.</span>PK <span class="token operator">=</span> B<span class="token punctuation">.</span>PK<span class="token keyword">WHERE</span> A<span class="token punctuation">.</span>PK <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token operator">OR</span> B<span class="token punctuation">.</span>PK <span class="token operator">IS</span> <span class="token boolean">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于mysql不支持full join，只能通过下面代码模拟实现：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>  A<span class="token punctuation">.</span>PK <span class="token keyword">AS</span> A_PK<span class="token punctuation">,</span> A<span class="token punctuation">.</span><span class="token keyword">Value</span> <span class="token keyword">AS</span> A_Value<span class="token punctuation">,</span> B<span class="token punctuation">.</span>PK <span class="token keyword">AS</span> B_PK<span class="token punctuation">,</span>B<span class="token punctuation">.</span><span class="token keyword">Value</span> <span class="token keyword">AS</span> B_Value <span class="token keyword">FROM</span> table_a A <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> table_b B<span class="token keyword">ON</span> A<span class="token punctuation">.</span>PK <span class="token operator">=</span> B<span class="token punctuation">.</span>PK <span class="token keyword">WHERE</span> B<span class="token punctuation">.</span>PK <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token keyword">UNION</span> <span class="token keyword">ALL</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_a A <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> table_b B <span class="token keyword">ON</span> A<span class="token punctuation">.</span>PK <span class="token operator">=</span> B<span class="token punctuation">.</span>PK  <span class="token keyword">WHERE</span> A<span class="token punctuation">.</span>PK <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询结果：<br><img src="https://raw.githubusercontent.com/1171257311/picgo/master/images/20200819223016.png" width="70%" height="50%"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划典型题之“买卖股票”系列</title>
      <link href="/2020/08/15/dong-tai-gui-hua-dian-xing-ti-zhi-mai-mai-gu-piao-xi-lie/"/>
      <url>/2020/08/15/dong-tai-gui-hua-dian-xing-ti-zhi-mai-mai-gu-piao-xi-lie/</url>
      
        <content type="html"><![CDATA[<h2 id="买卖股票系列题目1（简单）、"><a href="#买卖股票系列题目1（简单）、" class="headerlink" title="买卖股票系列题目1（简单）、"></a>买卖股票系列题目1（简单）、</h2><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。<br>如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。来自leetcode121，<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/submissions/" target="_blank" rel="noopener">链接</a>   </p><p><img src="https://raw.githubusercontent.com/1171257311/picgo/master/images/20200815204307.png" alt="20200815204307"></p><hr><p><strong>思路1</strong>：暴力法需要两轮遍历，外层遍历买入，内层遍历卖出，因此时间复杂度O(N^2)。思路2，只需要一层遍历，同时更新最小值以及利润最大值。因此需要两个变量保存最小买入价格和最大利润。时间复杂度降为O(N);</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>prices<span class="token operator">==</span>null<span class="token operator">||</span>prices<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minBuy<span class="token operator">=</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">int</span> maxSell<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>minBuy<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果当前价格小于最小价格</span>                minBuy<span class="token operator">=</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//当前价格大于最小价格</span>                <span class="token keyword">int</span> get<span class="token operator">=</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minBuy<span class="token punctuation">;</span>                maxSell<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxSell<span class="token punctuation">,</span>get<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> maxSell<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2</strong>、动态规划，如果说买卖股票这一系列题目有一个<strong>通用解法</strong>的话，那就是动态规划。<br>　　dp[i][j]表示第i天之后的最大收益（如果买入还没有卖出，那么收益就是负数），如果j=0，那么表示i天之后是持有股票的，如果j=1，那么表示i天之后是持有现金的（不持有股票的）。因此，可以总结出状态转移方程如下：</p><pre class="line-numbers language-java"><code class="language-java">dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">-</span>price<span class="token punctuation">[</span>i<span class="token punctuation">]</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>price<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意</strong>:这里注意第一行的0-price[i],因为只能买卖一次，如果第i天是持有股票的，那么要么dp[i-1][0]即前一天就持有股票，要么之前没有买卖过，今天第一次买入股票。只有这两种情况。</p><p>因此，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>prices<span class="token operator">==</span>null<span class="token operator">||</span>prices<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>prices<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="买卖股票系列题目2（简单）、"><a href="#买卖股票系列题目2（简单）、" class="headerlink" title="买卖股票系列题目2（简单）、"></a>买卖股票系列题目2（简单）、</h2><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。<br>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。leetcode122，<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/" target="_blank" rel="noopener">链接</a></p><p><img src="https://raw.githubusercontent.com/1171257311/picgo/master/images/20200815205318.png" alt="20200815205318"></p><p><strong>思路1</strong>：相比前面一道题，这里的变化就是可以买卖多次股票，求最大利润是多少。这里使用一种“峰谷”的思想（也不容易想，但是想到了就挺简单）。<br><img src="https://raw.githubusercontent.com/1171257311/picgo/master/images/20200815205413.png" alt="20200815205413"></p><p>　　<img src="https://raw.githubusercontent.com/1171257311/picgo/master/images/20200815205558.png" alt="20200815205558"></p><p>　　这里peak就是峰，valley就是谷，如上图。也就是说最大利润等于所有相邻的“峰”-相邻的“谷”的累加。如果我们试图跳过其中一个峰值来获取更多利润，那么我们最终将失去其中一笔交易中获得的利润，从而导致总利润的降低。<br>　　例如，在上述情况下，如果我们跳过 peaki 和 valleyj 试图通过考虑差异较大的点以获取更多的利润，获得的净利润总是会小与包含它们而获得的净利润，因为 C 总是小于 A+B。因此我们的任务就是找到所有相邻的“峰谷”。</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>prices<span class="token operator">==</span>null<span class="token operator">||</span>prices<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> peak<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>valley<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>prices<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//首先找到谷</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>prices<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>prices<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            valley<span class="token operator">=</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//然后找到峰</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>prices<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>prices<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            peak<span class="token operator">=</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            res<span class="token operator">+=</span>peak<span class="token operator">-</span>valley<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度O(N).</p><p><strong>思路2</strong>：就是刚才前面讲的通用解法，dp[i][j]表示第i天之后的最大收益（如果买入还没有卖出，那么收益就是负数），如果j=0，那么表示i天之后是持有股票的，如果j=1，那么表示i天之后是持有现金的（不持有股票的）。因此，可以总结出状态转移方程如下：   </p><pre class="line-numbers language-java"><code class="language-java">dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>price<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即：前一天要么已经持有股票了，今天依然持有，或者前一天卖出股票，今天买入股票，两者之间收益较大值</p><pre class="line-numbers language-java"><code class="language-java">dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>price<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即：前一天和今天都不持有股票，或者前一天持有今天卖出的最大收益。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>prices<span class="token operator">==</span>null<span class="token operator">||</span>prices<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>prices<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(N)，这里 N 表示股价数组的长度。空间复杂度O(N).</p><p>空间优化，因为这个表实际上是n行2列的，每一行只和上一行有关，因此只需要一维dp，或者说2个变量即可。因此将空间复杂度降为o（1）。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>prices<span class="token operator">==</span>null<span class="token operator">||</span>prices<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> have<span class="token operator">=</span><span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一开始持有股票、相当于上面dp的第一列</span>        <span class="token keyword">int</span> no<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一开始不持有股票，相当于上面dp的第二列</span>        <span class="token keyword">int</span> preHave<span class="token operator">=</span>have<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于保存</span>        <span class="token keyword">int</span> preNo<span class="token operator">=</span>no<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            have<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>preHave<span class="token punctuation">,</span>preNo<span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            no<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>preNo<span class="token punctuation">,</span>preHave<span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preHave<span class="token operator">=</span>have<span class="token punctuation">;</span>            preNo<span class="token operator">=</span>no<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> no<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="买卖股票系列题目3、（困难）"><a href="#买卖股票系列题目3、（困难）" class="headerlink" title="买卖股票系列题目3、（困难）"></a>买卖股票系列题目3、（困难）</h2><p>给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。<br>设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。<br><img src="https://raw.githubusercontent.com/1171257311/picgo/master/images/20200815210203.png"></p><p><strong>思路</strong>：这道题目和前面的区别就是：限制只能完成<strong>2笔交易</strong>。因此将原来的二维dp变成三维dp，里面增加一个k表示交易的次数</p><pre class="line-numbers language-java"><code class="language-java">dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>price<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>price<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还是和前面的一样，第三位的1表示这一天之后是<strong>持有股票</strong>。<br>如果第三位是0，表示这一天之后<strong>不持有股票</strong>。<br>然后因为多了一维，所以初始化的代码也多了一些：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>prices<span class="token operator">==</span>null<span class="token operator">||</span>prices<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一个2表示两次交易，第二个2表示两种状态，持有股票或者不持有股票</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这种情况不可能，没交易但是持有股票</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//交易一次，持有股票</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//交易一次，不持有股票</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//交易两次，持有股票</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//交易两次，不持有股票</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// dp[i][0][1]=0;//按道理应该写，但是写和没写答案是一样的</span>           <span class="token comment" spellcheck="true">// dp[i][0][0]=Integer.MIN_VALUE;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>prices<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度O(N*M)，N表示天数，M表示限制的交易次数，这里为2。</p><hr><h2 id="买卖股票系列题目4、（困难）"><a href="#买卖股票系列题目4、（困难）" class="headerlink" title="买卖股票系列题目4、（困难）"></a>买卖股票系列题目4、（困难）</h2><p>给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。<br>设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。leetcode188，<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/" target="_blank" rel="noopener">链接</a></p><p><img src="https://raw.githubusercontent.com/1171257311/picgo/master/images/20200815210805.png" alt="20200815210805"></p><p><strong>思路</strong>：这道题目的要求更进一步了，题目的变化是，买卖的次数是作为参数指定的k，而不是之前确定的。但是使用<strong>动态规划</strong>依然可以非常<strong>套路</strong>的解出来。<br>依然像上面一样初始化第一天的所有情况，然后双重循环更新所有dp元素。但是需要注意的是，如果k&gt;price.length/2，其实就是随便交易几次的情况（因为price.length/2是最多的交易次数），因此可以重用前面<strong>不限制交易次数</strong>（也就是前面的<em>系列题目2</em>）的代码。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>prices<span class="token operator">==</span>null<span class="token operator">||</span>prices<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一个2表示两次交易，第二个2表示两种状态，持有股票或者不持有股票</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">></span>prices<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">maxProfit1</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不限制交易次数的代码</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//初始化第一天的数据</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// dp[i][0][1]=0;</span>           <span class="token comment" spellcheck="true">// dp[i][0][0]=Integer.MIN_VALUE;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>prices<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="买卖股票系列题目5、（中等）"><a href="#买卖股票系列题目5、（中等）" class="headerlink" title="买卖股票系列题目5、（中等）"></a>买卖股票系列题目5、（中等）</h2><p>给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。​</p><p>设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:</p><pre><code>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。</code></pre><p><img src="https://raw.githubusercontent.com/1171257311/picgo/master/images/20200815211252.png"></p><p><strong>思路</strong>：这里的关键点就是冷冻期如何理解，其实很简单，冷冻期就是不能卖出的第二天立即买入股票，因此如果说买入是第i天，那么第i-2天必须得是不持有股票的。即状态传递方程式下面这样： </p><pre class="line-numbers language-java"><code class="language-java">dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是这里注意i-2一开始是越界的，i=1是1-2=-1，是越界的。所以使用一个变量保存i-2的值。</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>prices<span class="token operator">==</span>null<span class="token operator">||</span>prices<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dpPre<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> tmp<span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dpPre<span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dpPre<span class="token operator">=</span>tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>prices<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度O(N)。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>　　　关于股票这一系列的题目做下来感觉还是挺难的，但是一旦掌握了套路之后至少能确保做出来，虽然说计算效率其实不是很高，但是对于面试来说完全够用了，毕竟关键是能不能做出来，效率再高，现场想不起来，做不出来都是“扯淡”。</p><p>今天就这样吧。再会。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划典型题之“目标和”</title>
      <link href="/2020/08/12/dong-tai-gui-hua-dian-xing-ti-zhi-mu-biao-he/"/>
      <url>/2020/08/12/dong-tai-gui-hua-dian-xing-ti-zhi-mu-biao-he/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个非负整数数组，a1, a2, …, an, 和一个目标数，S。现在你有两个符号 + 和 -。对于数组中的任意一个整数，你都可以从 + 或 -中选择一个符号添加在前面。返回可以使最终数组和为目标数 S 的所有添加符号的方法数。<strong>来自leetcode494</strong>，<a href="https://leetcode-cn.com/problems/target-sum/" target="_blank" rel="noopener">题目链接点击这里</a> 。<br>　　<a id="more"></a></p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p><img src="https://raw.githubusercontent.com/1171257311/picgo/master/images/20200812205257.png" alt="20200812205257"></p><hr><h3 id="思路1、dfs（递归）"><a href="#思路1、dfs（递归）" class="headerlink" title="思路1、dfs（递归）"></a>思路1、dfs（递归）</h3><p>首先给的数组里面的数一定要使用，因此自然而然想到了：<strong>dfs</strong>，也就是枚举每一种可能性，一直枚举到最后一层。这种想法的示意图如下：</p><p><img src="https://raw.githubusercontent.com/1171257311/picgo/master/images/20200812205540.png" alt="20200812205540"></p><p>其实类似于一个二叉树，我们要求的其实就是这个二叉树里面的从根节点root到叶子节点的所有路径里面，路径和符合要求的有几条。代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findTargetSumWays</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> S<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token operator">==</span>null<span class="token operator">||</span>nums<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>S<span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span>  <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">,</span><span class="token keyword">int</span> sum<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//到了最后一层</span>            <span class="token keyword">return</span> sum<span class="token operator">==</span>target<span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>target<span class="token punctuation">,</span>sum<span class="token operator">+</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">process</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>target<span class="token punctuation">,</span>sum<span class="token operator">-</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以计算一下<strong>时间复杂度</strong>，因为数组里面每个元素都有两种情况，因此总的时间复杂度为<strong>O（2^N）</strong>，N为数组元素个数。<br>但是这种方法比较慢，OJ里面需要600ms，太慢了。</p><hr><h3 id="思路2、记忆化搜索"><a href="#思路2、记忆化搜索" class="headerlink" title="思路2、记忆化搜索"></a>思路2、记忆化搜索</h3><p>对<strong>暴力递归</strong>进行第一步优化，首先思考一下为什么暴力递归的速度这么慢？很简单，因为重复计算了很多子问题，只要process方法里面的index确定，sum确定，那么返回的方法数就是一定的；而原来的递归里面，即使浅层递归的index和sum确定了，依然往深层继续递归计算，但是这是不必要的计算，因此我们可以把这个结果保存下来。</p><p>也就是说只要遇到相同的index和sum，那么直接就可以返回之前保存的方法数。实现的方法就是保存在一个hashmap里面，key为index+sum字符串，value就是对应的方法数。这种优化方式一般叫做：<strong>“记忆化搜索”</strong>，优化代码如下：</p><pre class="line-numbers language-java"><code class="language-java"> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> memo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findTargetSumWays2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> S<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token operator">==</span>null<span class="token operator">||</span>nums<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token function">process2</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>S<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">int</span>  <span class="token function">process2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">,</span><span class="token keyword">int</span> sum<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//到了最后一层</span>            <span class="token keyword">return</span> sum<span class="token operator">==</span>target<span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>        String key<span class="token operator">=</span>index<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>sum<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>memo<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> memo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询之前有没有保存过，如果有直接返回之前保存的方法数</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token function">process2</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>target<span class="token punctuation">,</span>sum<span class="token operator">+</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">process2</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>target<span class="token punctuation">,</span>sum<span class="token operator">-</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            memo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<strong>记忆化搜索</strong>可以显著提升速度，但是还可以进一步优化，那就是<strong>动态规划</strong>。</p><hr><h3 id="思路3、动态规划"><a href="#思路3、动态规划" class="headerlink" title="思路3、动态规划"></a>思路3、动态规划</h3><p>首先，我们可以根据上面的暴力递归把状态传递方程给写出来：<br>dp[i][j]=dp[i+1][j-nums[i]]+dp[i+1][j+nums[i]]<br>这里的i就是index，这里的j就是sum，其实就是根据上面的process函数写的。<br>然后，我们可以先举个例子，来尝试画个表，看看动态规划的结果对不对，这里我们设置输入的数组为：[1,1,1,1],也就是index=4，累加和为-4~4（如-1-1-1-1=-4）。因此我们可以画出下面的二维表：   </p><p><img src="https://raw.githubusercontent.com/1171257311/picgo/master/images/20200812212039.png" alt="20200812212039"></p><p>注意，这里index一共为5行，0~3表示数组有4个数，最后一行是因为之前的递归process方法里面，index必须要到nums.length才能结束：</p><pre><code>index==nums.length;</code></pre><p>所以表格一共的层数为：数组元素个数+1个。</p><p>可以发现，最后，（0,0）位置就是我们要求的，他的值为4，是对的。代码如下：</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//二维dp</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findTargetSumWays</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> S<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token operator">==</span>null<span class="token operator">||</span>nums<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> row<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>nums<span class="token punctuation">)</span>            sum<span class="token operator">+=</span>num<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&lt;</span>S<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> col<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>sum<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sum<span class="token operator">+</span>S<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>row<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//注意边界问题,超过了边界就取第一列</span>               <span class="token keyword">int</span> l<span class="token operator">=</span>j<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">0</span><span class="token operator">?</span>j<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>               <span class="token keyword">int</span> r<span class="token operator">=</span>j<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>col<span class="token operator">?</span>j<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>               dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sum<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度为:O(M*N)，M表示多少个数，N表示2倍的数组累加和。相比之前的暴力递归下降了很多。至于这里的边界问题，我的意思就是如果数组下标超了，那么数组元素就是用0来代替，刚好第0列都是0，那就直接换成第0列吧。</p><hr><h3 id="思路4、继续优化成1维dp数组"><a href="#思路4、继续优化成1维dp数组" class="headerlink" title="思路4、继续优化成1维dp数组"></a>思路4、继续优化成1维dp数组</h3><p>　　　通过上面的表格可以发现，每一行的新元素只和下面一行的旧元素有关，因此我们可以只用一维数组解决。但是因为旧元素的列一个在左，一个在右，因此需要两个一维dp数组才行（因为不管从哪个方向更新，左右两个旧元素都会被有一个被“刷新”）。因此，用一个dp数组保存旧的元素，另外一个dp数组保存新的元素。代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//一维dp</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findTargetSumWays</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> S<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token operator">==</span>null<span class="token operator">||</span>nums<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> row<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>nums<span class="token punctuation">)</span>            sum<span class="token operator">+=</span>num<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&lt;</span>S<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> col<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>sum<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>sum<span class="token operator">+</span>S<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>row<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//新数组</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//注意边界问题</span>               <span class="token keyword">int</span> l<span class="token operator">=</span>j<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">0</span><span class="token operator">?</span>j<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>               <span class="token keyword">int</span> r<span class="token operator">=</span>j<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>col<span class="token operator">?</span>j<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>               next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            dp<span class="token operator">=</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>sum<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度和二维dp一样，但是空间复杂度又下降了。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>　　　这个题是一个很典型的动态规划方向的题目，优化的套路就是，先<strong>暴力递归</strong>，然后发现有重复子问题，然后使用<strong>记忆化搜索</strong>进行优化，然后再利用<strong>动态规划</strong>降低时间复杂度，最后再使用<strong>一维动态规划</strong>降低空间复杂度。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这是小安的博客</title>
      <link href="/2020/08/10/wen-zhang-biao-ti/"/>
      <url>/2020/08/10/wen-zhang-biao-ti/</url>
      
        <content type="html"><![CDATA[<p>　　这是我的第一篇博文，在这里给大家问个好。以前我都是在CSDN上写博客，今后我写的博客会同步转载到我的这个博客里面。如果有时间的话，我也会把我的之前的博文搬运过来。  </p><p>我之前的CSDN的博客地址为：<a href="https://blog.csdn.net/qq_35590091" target="_blank" rel="noopener">地址</a>  </p><p>另外，也要多学学使用markdown来写博客。再见！！! </p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
